#!/usr/bin/env node
require("dotenv").config();
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('Cache-Checkout:server');
var http = require('http');
const db = require("../models");
const dbconfigs = require("../config/initialize-db.config");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


function syncDatabase(){
  db.sequelize
      .sync()
      .then(() => {
        db.UserApp.findAll({}).then(function (apps) {
          if(apps.length===0){
            dbconfigs.apps.forEach( app =>{
              console.log("The app to create >>>",app)
              db.UserApp.create(app); });
          }
        });
        db.PaymentProviderConfig.findAll({}).then(function (configs) {
          if(configs.length===0){
            dbconfigs.providerConfigs.forEach( config =>{ db.PaymentProviderConfig.create(config); });
          }
        });
        db.PaymentModeProviders.findAll({}).then(function (providers) {
          if(providers.length===0){
            dbconfigs.paymentProviders.forEach( app =>{ db.PaymentModeProviders.create(app); });
          }
        });
        db.PaymentTransaction.findAll({}).then(function (providers) {
          if(providers.length===0){
            dbconfigs.paymentTransactions.forEach( app =>{ db.PaymentTransaction.create(app); });
          }
        });
})
}
setTimeout(syncDatabase, 5000);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {

  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind)
}
